!=======================================================================
! Generated by  : PSCAD v4.6.3.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   :  Machine-Load
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'
      REAL    EMTDC_XINT    ! 'Integrator /w Interpolation'
      REAL    REALPOLE      ! Real Pole
!     SUBR    SANDH2        ! Sample and Hold

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_3, NT_4, NT_5

! Control Signals
      INTEGER  IT_1, IT_2, IT_3, S2M, BRK, IT_4
      INTEGER  LRR, InitEx, InitGv
      REAL     linev, RT_1, RT_2, TE, W, TM, RT_3
      REAL     RT_4(3), cfld, vfld, RT_5, RT_6
      REAL     RT_7, RT_8, RT_9, f_nom, RT_10
      REAL     RT_11, RT_12, RT_13, Tmstdy, RT_14
      REAL     RT_15, RT_16, RT_17, RT_18, RT_19
      REAL     RT_20, POUT, QOUT, Pload1, Qload1
      REAL     Vload1, IMACA, IMACB, IMACC, Rang

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6, RVD2_1(2)
      REAL     RVD2_2(2), RVD1_7, RVD1_8, RVD1_9
      REAL     RVD1_10, RVD1_11, RVD1_12, RVD1_13
      REAL     RVD1_14, RVD1_15, RVD1_16, RVD1_17
      REAL     RVD1_18

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 9
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 39
      IPGB      = NPGB
      NPGB      = NPGB + 12
      INODE     = NNODE + 2
      NNODE     = NNODE + 17
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 42
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 4
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      IT_1     = STOI(ISTOI + 1)
      linev    = STOF(ISTOF + 1)
      IT_2     = STOI(ISTOI + 2)
      RT_1     = STOF(ISTOF + 2)
      IT_3     = STOI(ISTOI + 3)
      RT_2     = STOF(ISTOF + 3)
      TE       = STOF(ISTOF + 4)
      W        = STOF(ISTOF + 5)
      TM       = STOF(ISTOF + 6)
      RT_3     = STOF(ISTOF + 7)
      cfld     = STOF(ISTOF + 11)
      vfld     = STOF(ISTOF + 12)
      RT_5     = STOF(ISTOF + 13)
      S2M      = STOI(ISTOI + 4)
      BRK      = STOI(ISTOI + 5)
      RT_6     = STOF(ISTOF + 14)
      RT_7     = STOF(ISTOF + 15)
      RT_8     = STOF(ISTOF + 16)
      IT_4     = STOI(ISTOI + 6)
      RT_9     = STOF(ISTOF + 17)
      f_nom    = STOF(ISTOF + 18)
      RT_10    = STOF(ISTOF + 19)
      RT_11    = STOF(ISTOF + 20)
      RT_12    = STOF(ISTOF + 21)
      RT_13    = STOF(ISTOF + 22)
      Tmstdy   = STOF(ISTOF + 23)
      LRR      = STOI(ISTOI + 7)
      RT_14    = STOF(ISTOF + 24)
      RT_15    = STOF(ISTOF + 25)
      RT_16    = STOF(ISTOF + 26)
      RT_17    = STOF(ISTOF + 27)
      RT_18    = STOF(ISTOF + 28)
      RT_19    = STOF(ISTOF + 29)
      RT_20    = STOF(ISTOF + 30)
      POUT     = STOF(ISTOF + 31)
      QOUT     = STOF(ISTOF + 32)
      Pload1   = STOF(ISTOF + 33)
      Qload1   = STOF(ISTOF + 34)
      Vload1   = STOF(ISTOF + 35)
      InitEx   = STOI(ISTOI + 8)
      IMACA    = STOF(ISTOF + 36)
      IMACB    = STOF(ISTOF + 37)
      IMACC    = STOF(ISTOF + 38)
      Rang     = STOF(ISTOF + 39)
      InitGv   = STOI(ISTOI + 9)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         RT_4(IT_0) = STOF(ISTOF + 7 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------

      NT_3  = NODE(INODE + 3)
      NT_4  = NODE(INODE + 4)
      NT_5  = NODE(INODE + 5)

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[const] Real Constant 

      RT_16 = 1.07

! 20:[timerdefn]  
!  Timer
      IF(TIME.GE.0.3)THEN
        S2M = 1
      ELSE
        S2M = 0
      END IF
!

! 30:[timerdefn]  
!  Timer
      IF(TIME.GE.2.0)THEN
        LRR = 1
      ELSE
        LRR = 0
      END IF
!

! 50:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH+7), (IBRCH+8), (IBRCH+9),SS,1.0,0)

! 80:[const] Real Constant 

      RT_19 = 0.09

! 90:[edge] Edge Detector 
!  Edge_Detector
      IF (REAL(LRR) .LT. STORF(NSTORF)) THEN
         IT_4 = 0
      ELSE IF (REAL(LRR) .GT. STORF(NSTORF)) THEN
         IT_4 = 1
      ELSE
         IT_4 = 0
      ENDIF
      STORF(NSTORF) = REAL(LRR)
      NSTORF = NSTORF + 1
!

! 100:[const] Real Constant 

      f_nom = 50.0

! 110:[tbreakn] Timed Breaker Logic 
! Timed breaker logic
      IF ( TIMEZERO ) THEN
         BRK = 1
      ELSE
         BRK = 1
         IF ( TIME .GE. 2.5 ) BRK = (1-1)
      ENDIF

! 160:[mult] Multiplier 
      RT_18 = f_nom * RT_19

! 170:[gain] Gain Block 
!  Gain
      RT_9 = f_nom * W

! 180:[sumjct] Summing/Differencing Junctions 
      RT_10 = + RT_9 - f_nom

! 190:[div] Divider 
!
      IF (ABS(RT_18) .LT. 1.0E-100) THEN
         IF (RT_18 .LT. 0.0)  THEN
            RT_15 = -1.0E100 * RT_10
         ELSE
            RT_15 =  1.0E100 * RT_10
         ENDIF
      ELSE
         RT_15 = RT_10 / RT_18
      ENDIF
!

! 200:[integral] Interpolated Integrator 
      RVD1_1 = RTCF(NRTCF) ! Initial Output
      NRTCF = NRTCF + 1
      RVD2_1(1) = RT_10
      RVD2_1(2) = 0.0
      RVD2_2(1) = 0.0
      RVD2_2(2) = 0.0
      RT_20 = EMTDC_XINT(0, 0, 0, RVD1_1, 0.24106, 0.0, -10.0, 10.0, RVD&
     &2_2, RVD2_1)

! 210:[gain] Gain Block 
!  Gain
      RT_14 = 0.0 * RT_20

! 220:[sumjct] Summing/Differencing Junctions 
      RT_13 = - RT_14 - RT_15

! 230:[realpole] Real Pole 
!  Real_Pole
      RT_7 = REALPOLE(IT_4,1,0,1.0,0.35,RT_13,0.0,-10.0,10.0)

! 240:[realpole] Real Pole 
!  Real_Pole
      RT_8 = REALPOLE(IT_4,1,0,1.0,0.15,RT_7,0.0,-10.0,10.0)

! 250:[gain] Gain Block 
!  Gain
      RT_12 = 1.0 * RT_8

! 260:[sandhdefn] Sample and Hold 
!  Sample and Hold
      CALL SANDH2(Tmstdy,LRR,  1,  RT_11)

! 270:[sumjct] Summing/Differencing Junctions 
      RT_5 = + RT_11 + RT_12

! 280:[sync_machine] Synchronous Machine 'TurboG'
      CALL COMPONENT_ID(ICALL_NO,26149876)
! RVD1_1 - Speed
! RVD1_2 - Neutral Voltage
! RVD1_3 - Neutral Current
! RVD1_4 - Load Angle
! RVD1_5 - Rotor Mechanical Angle
! RVD1_6 - Real Power output
! RVD1_7 - Reactive Power output
! RVD1_8 - Mechanical Torque
! RVD1_9 - Electrical Torque
! RVD1_10:15 - Monitored STOR locations
! RVD1_16:17 - Terminal Voltage RMS,pu
! RVD1_18 - Inverse of Base MVA
! IVD1_2 - Machine is active, Initialize exciter
! IVD1_3 - Torque driven, Initialize governor/turbine
      STORI(NSTORI) = NINT(STOR(NEXC+294))
      IVD1_1 = NRTCF
      RVD1_1 = RTCF(IVD1_1+2)
      CALL SYNCMC3P1_EXE(SS,  (IBRCH+10), (IBRCH+11), (IBRCH+12),0.0,0,S&
     &2M,1.0,0,LRR,RVD1_1,RT_5,0,0,1.0,0.0,314.15926,vfld,0,1.0,cfld,RVD&
     &1_2,RVD1_3,RVD1_4,RVD1_5,W,TE,RVD1_6,RVD1_7,RVD1_8,RVD1_9,IVD1_2,I&
     &VD1_3,RVD1_10,RVD1_11,RVD1_12,RVD1_13,RVD1_14,RVD1_15)
      TM = RT_5
      IF (IVD1_3 .EQ. 0) TM = RVD1_8
      Tmstdy = RVD1_8
      RT_3 = STOR(NEXC-375+265)*STOR(NEXC-375+302)
      IF ((IVD1_2 .EQ. 1) .AND. (STORI(NSTORI).EQ.0)) THEN
          IF (STOR(NEXC-375+293).GT.0.5) THEN
              STORF(NSTORF) = STOR(NEXC-375+161)
          ELSE
              STORF(NSTORF) = STOR(NEXC-375+296)
          ENDIF
      ENDIF
      IF (IVD1_2 .EQ. 1) THEN
        STORF(NSTORF+1) = STORF(NSTORF+1) + (W-RTCF(IVD1_1+2))*DELT
        IF (IVD1_3 .EQ. 0) STORF(NSTORF+2) = RVD1_4
        STORF(NSTORF+3) = STORF(NSTORF) + STORF(NSTORF+1) + STORF(NSTORF&
     &+2)
      ELSE
        STORF(NSTORF+3) = 0.0
      ENDIF
      RVD1_16 = VM3PH2(SS,NT_4,NT_5,NT_3,0.02)/(SQRT_3*RTCF(IVD1_1+1))
      IF(RVD1_16 .LT. 1.0E-8) THEN
         RVD1_17 = 1.0
      ELSE
         RVD1_17 = RVD1_16
      ENDIF
      RVD1_18 = 1.0/(3.0*RTCF(IVD1_1)*RTCF(IVD1_1+1))
      RT_4(1) = RVD1_17
      IF(RVD1_16 .LT. 1.0E-8) THEN
         RT_4(2) = 0.0
         RT_4(3) = 0.0
      ELSE
         RT_4(2) = RVD1_6*RVD1_18/RVD1_17
         RT_4(3) = -RVD1_7*RVD1_18/RVD1_17
      ENDIF
      W = W/RTCF(IVD1_1+2)
      POUT = RVD1_6/(3.0*RTCF(IVD1_1)*RTCF(IVD1_1+1))
      QOUT = RVD1_7/(3.0*RTCF(IVD1_1)*RTCF(IVD1_1+1))
      Rang = RVD1_5
      InitGv = IVD1_3
      InitEx = IVD1_2
      NSTORF = NSTORF + 4
      NSTORI = NSTORI + 1

! 290:[excac] Type AC exciter 
      CALL COMPONENT_ID(ICALL_NO,1510231153)
! Alternator Supplied Controlled- Rectifier Exciter AC4A
      CALL EXCAC4A2_EXE(RT_16,cfld,RT_4,0.0,RT_3,InitEx,vfld,-1.0E10)
      RT_17 = STORF(THIS)

! 310:[pgb] Output Channel 'Qgen'

      PGB(IPGB+2) = QOUT

! 330:[breaker3] 3 Phase Breaker 'BRK'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS, (IBRCH+31),0.1,1000000.0,RTCF(NRTCF),1,NIN&
     &T(1.0-REAL(BRK)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+32),0.1,1000000.0,RTCF(NRTCF),1,NIN&
     &T(1.0-REAL(BRK)))
      CALL EMTDC_BREAKER1(SS, (IBRCH+33),0.1,1000000.0,RTCF(NRTCF),1,NIN&
     &T(1.0-REAL(BRK)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH+31),SS))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH+32),SS))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH+33),SS))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2064132250,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2064132250,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2064132250,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH+31),SS))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH+32),SS))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH+33),SS))

! 340:[pgb] Output Channel 'Pgen'

      PGB(IPGB+4) = 700.67 * POUT

! 360:[pgb] Output Channel 'InitTG'

      PGB(IPGB+6) = Tmstdy

! 370:[pgb] Output Channel 'Speed'

      PGB(IPGB+7) = 50.0 * W

! 380:[pgb] Output Channel 'Tm'

      PGB(IPGB+8) = TM

! 400:[realpole] Real Pole 
!  Real_Pole
      RT_6 = REALPOLE(0,1,0,1.0,0.05,TE,0.0,-10.0,10.0)

! 410:[pgb] Output Channel 'Te'

      PGB(IPGB+10) = RT_6

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS, (IBRCH+25), (IBRCH+26), (IBRCH+27), (IBRCH+28&
     &), (IBRCH+29), (IBRCH+30))

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS, (IBRCH+34), (IBRCH+35), (IBRCH+36), (IBRCH+37&
     &), (IBRCH+38), (IBRCH+39))

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOI(ISTOI + 1) = IT_1
      STOF(ISTOF + 1) = linev
      STOI(ISTOI + 2) = IT_2
      STOF(ISTOF + 2) = RT_1
      STOI(ISTOI + 3) = IT_3
      STOF(ISTOF + 3) = RT_2
      STOF(ISTOF + 4) = TE
      STOF(ISTOF + 5) = W
      STOF(ISTOF + 6) = TM
      STOF(ISTOF + 7) = RT_3
      STOF(ISTOF + 11) = cfld
      STOF(ISTOF + 12) = vfld
      STOF(ISTOF + 13) = RT_5
      STOI(ISTOI + 4) = S2M
      STOI(ISTOI + 5) = BRK
      STOF(ISTOF + 14) = RT_6
      STOF(ISTOF + 15) = RT_7
      STOF(ISTOF + 16) = RT_8
      STOI(ISTOI + 6) = IT_4
      STOF(ISTOF + 17) = RT_9
      STOF(ISTOF + 18) = f_nom
      STOF(ISTOF + 19) = RT_10
      STOF(ISTOF + 20) = RT_11
      STOF(ISTOF + 21) = RT_12
      STOF(ISTOF + 22) = RT_13
      STOF(ISTOF + 23) = Tmstdy
      STOI(ISTOI + 7) = LRR
      STOF(ISTOF + 24) = RT_14
      STOF(ISTOF + 25) = RT_15
      STOF(ISTOF + 26) = RT_16
      STOF(ISTOF + 27) = RT_17
      STOF(ISTOF + 28) = RT_18
      STOF(ISTOF + 29) = RT_19
      STOF(ISTOF + 30) = RT_20
      STOF(ISTOF + 31) = POUT
      STOF(ISTOF + 32) = QOUT
      STOF(ISTOF + 33) = Pload1
      STOF(ISTOF + 34) = Qload1
      STOF(ISTOF + 35) = Vload1
      STOI(ISTOI + 8) = InitEx
      STOF(ISTOF + 36) = IMACA
      STOF(ISTOF + 37) = IMACB
      STOF(ISTOF + 38) = IMACC
      STOF(ISTOF + 39) = Rang
      STOI(ISTOI + 9) = InitGv

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 7 + IT_0) = RT_4(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'
      REAL    VBRANCH       ! 

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indices
      INTEGER  NT_1, NT_2, NT_3, NT_4, NT_5, NT_6
      INTEGER  NT_7, NT_8, NT_9, NT_12(3)

! Control Signals
      INTEGER  IT_1, IT_2, IT_3
      REAL     linev, RT_1, RT_2, f_nom, RT_16
      REAL     RT_19, Pload1, Qload1, Vload1
      REAL     IMACA, IMACB, IMACC

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 12
      INODE     = NNODE + 2
      NNODE     = NNODE + 17
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 42
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 4
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      IT_1     = STOI(ISTOI + 1)
      linev    = STOF(ISTOF + 1)
      IT_2     = STOI(ISTOI + 2)
      RT_1     = STOF(ISTOF + 2)
      IT_3     = STOI(ISTOI + 3)
      RT_2     = STOF(ISTOF + 3)
      f_nom    = STOF(ISTOF + 18)
      RT_16    = STOF(ISTOF + 26)
      RT_19    = STOF(ISTOF + 29)
      Pload1   = STOF(ISTOF + 33)
      Qload1   = STOF(ISTOF + 34)
      Vload1   = STOF(ISTOF + 35)
      IMACA    = STOF(ISTOF + 36)
      IMACB    = STOF(ISTOF + 37)
      IMACC    = STOF(ISTOF + 38)


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------

      NT_1  = NODE(INODE + 1)
      NT_2  = NODE(INODE + 2)
      NT_3  = NODE(INODE + 3)
      NT_4  = NODE(INODE + 4)
      NT_5  = NODE(INODE + 5)
      NT_6  = NODE(INODE + 6)
      NT_7  = NODE(INODE + 11)
      NT_8  = NODE(INODE + 10)
      NT_9  = NODE(INODE + 12)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_12(IT_0) = NODE(INODE + 12 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[const] Real Constant 

      RT_16 = 1.07

! 50:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
      IMACA = CDCTR(1,(IXFMR + 1))
      IMACB = CDCTR(1,(IXFMR + 2))
      IMACC = CDCTR(1,(IXFMR + 3))

! 80:[const] Real Constant 

      RT_19 = 0.09

! 100:[const] Real Constant 

      f_nom = 50.0

! 120:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS, (IBRCH+40), (IBRCH+41), (IBRCH+4&
     &2),RTCF(IVD1_1+2),0)
      Pload1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS, (IBRCH+40), (IBRCH+41), (IBRCH+4&
     &2),RTCF(IVD1_1+2),0)
      Qload1 = RVD1_1
      RVD1_1 = RTCF(IVD1_1+1) * VM3PH2(SS, NT_12(1), NT_12(2), NT_12(3),&
     & RTCF(IVD1_1+2))
      Vload1 = RVD1_1

! 130:[rms3ph] Three Phase RMS Meter 
      RVD1_1 = RTCF(NRTCF) ! Inverse of rated voltage
      NRTCF = NRTCF + 1
      linev = RVD1_1 * VM3PH2(SS, NT_4, NT_5, NT_3, 0.02)
!

! 140:[rms3ph] Three Phase RMS Meter 
      RVD1_1 = RTCF(NRTCF) ! Inverse of rated voltage
      NRTCF = NRTCF + 1
      RT_2 = RVD1_1 * VM3PH2(SS, NT_2, NT_6, NT_1, 0.02)
!

! 150:[rms3ph] Three Phase RMS Meter 
      RVD1_1 = RTCF(NRTCF) ! Inverse of rated voltage
      NRTCF = NRTCF + 1
      RT_1 = RVD1_1 * VM3PH2(SS, NT_8, NT_7, NT_9, 0.02)
!

! 300:[pgb] Output Channel 'Vload1'

      PGB(IPGB+1) = Vload1

! 320:[pgb] Output Channel 'Qload1'

      PGB(IPGB+3) = Qload1

! 330:[breaker3] 3 Phase Breaker 'BRK'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS, (IBRCH+31), (IBRCH+32), (IBRCH+33),0,0,0,IVD1_1&
     &,0.02,RVD1_1,RVD1_2)

! 350:[pgb] Output Channel 'Pload1'

      PGB(IPGB+5) = Pload1

! 390:[pgb] Output Channel 'Voltage on HV side of 400/110 kV trafo'

      PGB(IPGB+9) = RT_1

! 420:[pgb] Output Channel 'Voltage on HV side of generator trafo'

      PGB(IPGB+11) = RT_2

! 430:[pgb] Output Channel 'Output voltage of generator'

      PGB(IPGB+12) = linev

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOI(ISTOI + 1) = IT_1
      STOF(ISTOF + 1) = linev
      STOI(ISTOI + 2) = IT_2
      STOF(ISTOF + 2) = RT_1
      STOI(ISTOI + 3) = IT_3
      STOF(ISTOF + 3) = RT_2
      STOF(ISTOF + 18) = f_nom
      STOF(ISTOF + 26) = RT_16
      STOF(ISTOF + 29) = RT_19
      STOF(ISTOF + 33) = Pload1
      STOF(ISTOF + 34) = Qload1
      STOF(ISTOF + 35) = Vload1
      STOF(ISTOF + 36) = IMACA
      STOF(ISTOF + 37) = IMACB
      STOF(ISTOF + 38) = IMACC


!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     f_nom, RT_16, RT_19

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6, RVD10_1(10)
      REAL     RVD10_2(10)

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 17
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 42
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 4
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[const] Real Constant 
      RT_16 = 1.07

! 20:[timerdefn]  

! 30:[timerdefn]  

! 50:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
      CALL COMPONENT_ID(ICALL_NO,641674270)
      RVD1_1 = ONE_3RD*820.0
      RVD1_2 = 400.0*SQRT_1BY3
      RVD1_3 = 26.0
      CALL E_TF2W_CFG((IXFMR + 1),1,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,1.&
     &0)
      CALL E_TF2W_CFG((IXFMR + 2),1,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,1.&
     &0)
      CALL E_TF2W_CFG((IXFMR + 3),1,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,1.&
     &0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(820.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH+1),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+2),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+3),SS,IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+4),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+5),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH+6),SS,IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH+7), (IBRCH+8), (IBRCH+9),SS,RVD1_1,RVD1_2,0&
     &.2,1.25,50.0,1.0,1.0,0.0)

! 80:[const] Real Constant 
      RT_19 = 0.09

! 90:[edge] Edge Detector 

! 100:[const] Real Constant 
      f_nom = 50.0

! 160:[mult] Multiplier 

! 170:[gain] Gain Block 

! 180:[sumjct] Summing/Differencing Junctions 

! 190:[div] Divider 

! 200:[integral] Interpolated Integrator 
      RTCF(NRTCF) = 0.0
      NRTCF = NRTCF + 1

! 210:[gain] Gain Block 

! 220:[sumjct] Summing/Differencing Junctions 

! 230:[realpole] Real Pole 

! 240:[realpole] Real Pole 

! 250:[gain] Gain Block 

! 260:[sandhdefn] Sample and Hold 

! 270:[sumjct] Summing/Differencing Junctions 

! 280:[sync_machine] Synchronous Machine 'TurboG'
      CALL COMPONENT_ID(ICALL_NO,26149876)
      RVD10_1(1) = 0.0
      RVD10_2(1) = 0.0
      RVD10_1(2) = 1.0
      RVD10_2(2) = SQRT_2/(1.014-0.163*1.0)
      RVD10_1(3) = -1.0
      RVD10_2(3) = 0.0
      DO IVD1_1 = 4,10
        RVD10_1(IVD1_1) = 0.0
        RVD10_2(IVD1_1) = 0.0
      ENDDO
      CALL SYNCMC3P0_CFG(1,0,1,314.15926,0.0051716, 0.163,1.0,1.014,0.28&
     &,0.314,1.0E-6, 0.77,0.375,0.228,RVD1_1,RVD1_2,RVD1_3)
      RVD1_4 = 0.0/(3.0*15.01*15.56)
      RVD1_5 = 0.0/(3.0*15.01*15.56)
      CALL SYNCMC3P1_CFG(1,1,1,1,1,1,1,1,1,15.56,15.01,314.15926,10000.0&
     &,0.0,4.0,0.0,300.0,RVD1_1,RVD1_2,1.014,0.28, 0.039,0.314,6.55,1.0E&
     &6,1.0E6, 0.77,0.375,0.071, 1.0E6,1.0E6, RVD10_1,RVD10_2, 1.07,0.0,&
     &RVD1_4,RVD1_5,0.0, 0.1,100.0,0.2,1.07,0.0)

! 290:[excac] Type AC exciter 
      CALL COMPONENT_ID(ICALL_NO,1510231153)
      CALL EXCAC4A2_CFG(10.0,1.0,100.0,0.015,10.0,-10.0,4.8,-4.53,0.0,0.&
     &0,0.0,0.0)

! 310:[pgb] Output Channel 'Qgen'

! 330:[breaker3] 3 Phase Breaker 'BRK'
      CALL COMPONENT_ID(ICALL_NO,2064132250)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 340:[pgb] Output Channel 'Pgen'

! 360:[pgb] Output Channel 'InitTG'

! 370:[pgb] Output Channel 'Speed'

! 380:[pgb] Output Channel 'Tm'

! 400:[realpole] Real Pole 

! 410:[pgb] Output Channel 'Te'

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,272207740)
      CALL PI3_SECTION_CFG(3,1,1, 400.0,200.0,50.0,50000.0,7.4e-08,8.0e-&
     &07,2.2e-18,1.5,1.5,1.5,RVD1_1,RVD1_2,RVD1_3,RVD1_4,RVD1_5,RVD1_6,I&
     &VD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH+13),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+14),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+15),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+16),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+17),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+18),SS,0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH+19),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+20),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+21),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+22),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+23),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH+24),SS,0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 4),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(230.0,50.0,60.0,0.0,0.0,0.0,0.0,0.0)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(230.0,50.0,140.0,0.0,0.0,0.0,0.0,0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     f_nom, RT_16, RT_19

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER SS, INODE, IBRCH, IXFMR             ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices
!---------------------------------------


! Define electric network subsystem number

      SS        = NODE(NNODE+1)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 17
      IBRCH     = NBRCH(SS)
      NBRCH(SS) = NBRCH(SS) + 42
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 4
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[const] Real Constant 
      RT_16 = 1.07

! 80:[const] Real Constant 
      RT_19 = 0.09

! 100:[const] Real Constant 
      f_nom = 50.0

! 120:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02

! 130:[rms3ph] Three Phase RMS Meter 
      RTCF(NRTCF) = 1.0
      IF (26.0 .GT. 1.0E-20) RTCF(NRTCF) = 1.0/26.0
      NRTCF = NRTCF + 1

! 140:[rms3ph] Three Phase RMS Meter 
      RTCF(NRTCF) = 1.0
      IF (400.0 .GT. 1.0E-20) RTCF(NRTCF) = 1.0/400.0
      NRTCF = NRTCF + 1

! 150:[rms3ph] Three Phase RMS Meter 
      RTCF(NRTCF) = 1.0
      IF (400.0 .GT. 1.0E-20) RTCF(NRTCF) = 1.0/400.0
      NRTCF = NRTCF + 1

! 300:[pgb] Output Channel 'Vload1'

! 320:[pgb] Output Channel 'Qload1'

! 350:[pgb] Output Channel 'Pload1'

! 390:[pgb] Output Channel 'Voltage on HV side of 400/110 kV trafo'

! 420:[pgb] Output Channel 'Voltage on HV side of generator trafo'

! 430:[pgb] Output Channel 'Output voltage of generator'

      RETURN
      END

